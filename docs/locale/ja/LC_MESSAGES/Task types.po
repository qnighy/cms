# Japanese translations for CMS package.
# Copyright (C) 2013, The CMS development team
# This file is distributed under the same license as the CMS package.
# Masaki Hara <ackie.h.gmai@gmail.com>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: CMS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-03 09:00\n"
"PO-Revision-Date: 2013-03-03 17:42+0900\n"
"Last-Translator: Masaki Hara <ackie.h.gmai@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 41d43ac8e5964f44be5af6223e825053
#: ..\..\Task types.rst:2
msgid "Task types"
msgstr ""

# c1f9c10648ad478b92eeecd3b36bcf7e
#: ..\..\Task types.rst:5
msgid "Introduction"
msgstr ""

# 487182bd5fc048819f700f2c47e806b3
#: ..\..\Task types.rst:7
msgid ""
"In the CMS terminology, the task type of a task describes how to compile and "
"evaluate the submissions for that task. In particular, they may require "
"additional files called managers, provided by the admins."
msgstr ""

# 35f7a1d271444db78dca580dd85f022c
#: ..\..\Task types.rst:9
msgid ""
"A submission goes through two steps involving the task type (that might also "
"be empty): the compilation, that usually creates an executable from the "
"submitted files, and the evaluation, that runs this executable against the "
"set of testcases and produces an outcome for each of them."
msgstr ""

# 334646809da94f0d9937d9f56bb62e34
#: ..\..\Task types.rst:11
msgid ""
"Note that the outcome doesn't need to be obviously tied to the score for the "
"submission: typically, the outcome is computed by a grader (which is an "
"executable or a program stub passed to CMS) or a comparator (a program that "
"decides if the output of the contestant's program is correct) and not by the "
"task type. Hence, the task type doesn't need to know the meaning of the "
"outcome, which is instead known by the grader and by the :doc:`score type "
"<Score types>`."
msgstr ""

# 876c18ecca98473f916b6b488c025597
#: ..\..\Task types.rst:15
msgid "Standard task types"
msgstr ""

# 91e0a0dd16624c90a61d073cc60a9396
#: ..\..\Task types.rst:17
msgid ""
"CMS ships with four task types: Batch, OutputOnly, Communication, TwoSteps. "
"The first two are well tested and reasonably strong against cheating "
"attempts and stable with respect to the evaluation times. Communication "
"should be usable but it is less tested than the first two. The last one, "
"TwoSteps, is probably not ready for usage in a public competition. The first "
"two task types cover all but three of the IOI tasks up to IOI 2012."
msgstr ""

# 0ee4af130c9b4c229c313f1bc00adc22
#: ..\..\Task types.rst:19
msgid ""
"You can configure, for each task, the behavior of these task types on the "
"task's page in AdminWebServer."
msgstr ""

# 267822795e264306a7598d6e4c4ad42e
#: ..\..\Task types.rst:25
msgid "Batch"
msgstr ""

# 2bd38fe504ab49f48c46fed45ce4e730
#: ..\..\Task types.rst:27
msgid ""
"In a Batch task, the contestant submits a single source file, in one of the "
"three supported languages: C, C++, or Pascal."
msgstr ""

# 6217b2cca6674f47b5c5df9c1af340c7
#: ..\..\Task types.rst:29
msgid ""
"The source file is either standalone or to be compiled with a grader "
"provided by the contest admins. The resulting executable does I/O either on "
"standard input and output or on two files with a specified name. The output "
"produced by the contestant's program is then compared to the correct output "
"either using a simple diff algorithm (that ignores whitespaces) or using a "
"comparator, provided by the admins."
msgstr ""

# 7f403f3113244589aa1610119d19c464
#: ..\..\Task types.rst:31
msgid ""
"The three choices (standalone or with a grader, standard input and output or "
"files, diff or comparator) are specified through parameters."
msgstr ""

# 7181e7690a4e4876b7d138ac54f81db1
#: ..\..\Task types.rst:33
msgid ""
"If the admins want to provide a grader that takes care of reading the input "
"and writing the output (so that the contestants only need to write one or "
"more functions), they must provide three managers, called :file:`grader.c`, :"
"file:`grader.cpp` and :file:`grader.pas`. If header files are needed, they "
"can be provided with names :file:`{task_name}.h` or :file:`{task_name}lib."
"pas`."
msgstr ""

# 67e160c1d749413fbcc08075c553ef21
#: ..\..\Task types.rst:35
msgid ""
"If the output is compared with a diff, the outcome will be a float, 0.0 if "
"the output is not correct, 1.0 if it is. If the output is validated by a "
"comparator, you need to provide a manager called :file:`checker` that is an "
"executable taking three arguments: input, correct output and contestant's "
"output and that must write on standard output the outcome (that is going to "
"be used by the score type, usually a float between 0.0 and 1.0), and on "
"standard error a message to forward to the contestant."
msgstr ""

# 95deff6f895f4eb09e53687259cb3dc7
# 7e50d786f84441cd81f5c5866f8820c7
#: ..\..\Task types.rst:37 types.rst:65
msgid ""
"The submission format must contain one filename ending with ``.%l``. If "
"there are additional files, the contestants are forced to submit them, the "
"admins can inspect them, but they are not used towards the evaluation."
msgstr ""

# 8a6eef4dfd07425594d94231088d9aa8
#: ..\..\Task types.rst:43
msgid "OutputOnly"
msgstr ""

# 73ef33d1f9bd465d8d5e295d8a4efd52
#: ..\..\Task types.rst:45
msgid ""
"In an OutputOnly task, the contestant submits a file for each testcase. "
"Usually, the semantics is that the task specifies a task to be performed on "
"an input file, and the admins provide a set of testcases composed of an "
"input and an output file (as it is for a Batch task). The difference is "
"that, instead of requiring a program that solves the task without knowing "
"the input files, the contestant are required, given the input files, to "
"provide the output files."
msgstr ""

# d9d7a95a32fd4f638fcbc8d03bd0c1a0
#: ..\..\Task types.rst:47
msgid ""
"There is only one parameter for OutputOnly tasks, namely how correctness of "
"the contestants' outputs is checked. Similarly to the Batch task type, these "
"can be checked using a diff or using a comparator, that is an executable "
"manager named checker, with the same properties of the one for Batch tasks."
msgstr ""

# 02bce6c8ae5f4c8aab1da3ef8b2e260f
#: ..\..\Task types.rst:49
msgid ""
"OutputOnly tasks usually have many uncorrelated files to be submitted. "
"Contestants may submit the first output in a submission, and the second in "
"another submission, but it is easy to forget  the first output in the other "
"submission; it is also tedious to add every output every time. Hence, "
"OutputOnly tasks have a feature that, if a submission lacks the output for a "
"certain testcase, the current submission is completed with the most recently "
"submitted output for that testcase (if it exists). This has the effect that "
"contestants can work on a testcase at a time, submitting only what they did "
"from the last submission."
msgstr ""

# 3abd32607060467dbfadf51be44cc3e2
#: ..\..\Task types.rst:51
msgid ""
"The submission format must contain all the filenames of the form :file:"
"`output_{num}.txt` where :samp:`{num}` is a three digit decimal number "
"(padded with zeroes, and goes from 0 (included) to the number of testcases "
"(excluded). Again, you can add other files that are stored but ignored. For "
"example, a valid submission format for an OutputOnly task with three "
"testcases is ``[\"output_000.txt\", \"output_001.txt\", \"output_002.txt\"]"
"``."
msgstr ""

# 8158ed7998524334bf42e05823fd8f43
#: ..\..\Task types.rst:57
msgid "Communication"
msgstr ""

# 88dbcf0392eb443498c5e9e206b3c5a1
#: ..\..\Task types.rst:59
msgid ""
"In a Communication task, a contestant must submit a source file implementing "
"a function, similarly to what happens for a Batch task. The difference is "
"that the admins must provide both a stub, that is a source file that is "
"compiled together with the contestant's source, and a manager, that is an "
"executable."
msgstr ""

# 694ea6f4b5924dc29a568deed076cefa
#: ..\..\Task types.rst:61
msgid ""
"The two programs communicate through two fifo files. The manager receives "
"the name of the two fifos as its arguments. It is supposed to read from "
"standard input the input of the testcase, and to start communicating some "
"data to the other program through the fifo. The two programs exchange data "
"through the fifo, until the manager is able to assign an outcome to the "
"evaluation. The manager then writes to standard output the outcome and to "
"standard error the message to the user."
msgstr ""

# d10422b8c82843c598dd021b4e7cd8d2
#: ..\..\Task types.rst:63
msgid ""
"If the program linked to the user-provided file fails (for a timeout, or for "
"a non-allowed syscall), the outcome is 0.0 and the message describes the "
"problem to the user."
msgstr ""

# fcec9448e32d4c3f9cff8f21c4c63ae5
#: ..\..\Task types.rst:69
msgid "TwoSteps"
msgstr ""

# 7f1d21d5d47748a18dbf27dc33dc759c
#: ..\..\Task types.rst:71
msgid "Warning: use this task type only if you know what are you doing."
msgstr ""

# a1274173e1c54258b5fae53b97fb6db8
#: ..\..\Task types.rst:73
msgid ""
"In a TwoSteps task, contestants submit two source files implementing a "
"function each (the idea is that the first function gets the input and "
"compute some data from it with some restriction, and the second tries to "
"retrieve the original data)."
msgstr ""

# dbd9061b6cd64a639a37043a756d2c56
#: ..\..\Task types.rst:75
msgid ""
"The admins must provide a manager compiled together with both files. The "
"resulting executable is run twice (one acting as the computer, one acting as "
"the retriever. The manager in the computer executable must take care of "
"reading the input from standard input; the one in the retriever executable "
"of writing the outcome and the explanation message to standard output and "
"error respectively. Both must take responsibility of the communication "
"between them through a pipe."
msgstr ""

# 09ee99e2917149e18d4346834a6863f4
#: ..\..\Task types.rst:77
msgid ""
"More precisely, the executable are called with two arguments: the first is "
"an integer which is 0 if the executable is the computer, and 1 if it is the "
"retriever; the second is the name of the pipe to be used for communication "
"between the processes."
msgstr ""
